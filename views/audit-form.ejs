<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HubSpot Usage Audit</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <style>
    :root {
      --hubspot-orange: #ff7a59;
      --hubspot-coral: #ff8e6e;
      --hubspot-dark: #33475b;
      --hubspot-gray: #f5f8fa;
    }

    body {
      background-color: var(--hubspot-gray);
      font-family: 'Inter', 'Segoe UI', sans-serif;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Header Bar */
    .hubspot-header {
      background: white;
      padding: 10px 30px;
      border-bottom: 1px solid #eaeaea;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .hubspot-logo {
      font-size: 1.3rem;
      font-weight: 700;
      color: var(--hubspot-orange);
    }

    /* Container */
    .audit-container {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 30px 15px;
    }

    /* Question Card */
    .question-card {
      background: white;
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
      padding: 40px;
      max-width: 720px;
      width: 100%;
      text-align: center;
      animation: fadeIn 0.4s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .section-badge {
      background: var(--hubspot-orange);
      color: white;
      padding: 6px 18px;
      border-radius: 25px;
      font-weight: 600;
      margin-bottom: 15px;
      display: inline-block;
    }

    .question-text {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--hubspot-dark);
      margin-bottom: 25px;
      line-height: 1.4;
    }

    /* Options */
    .options-container {
      display: flex;
      gap: 15px;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 25px;
    }

    .option-btn {
      border: 2px solid #dee2e6;
      border-radius: 12px;
      padding: 20px 30px;
      min-width: 150px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 600;
      color: var(--hubspot-dark);
      background: white;
    }

    .option-btn:hover {
      border-color: var(--hubspot-orange);
      box-shadow: 0 6px 15px rgba(255, 122, 89, 0.25);
      transform: translateY(-2px);
    }

    .option-btn.selected {
      background: var(--hubspot-orange);
      border-color: var(--hubspot-orange);
      color: white;
      transform: translateY(-2px);
    }

    .progress-bar {
      height: 10px;
      border-radius: 5px;
      background: #e9ecef;
      overflow: hidden;
      margin-top: 10px;
    }

    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, var(--hubspot-orange), var(--hubspot-coral));
      transition: width 0.5s ease;
    }

    .navigation-buttons {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 30px;
    }

    .btn-custom {
      background: var(--hubspot-orange);
      color: white;
      border: none;
      border-radius: 10px;
      padding: 12px 30px;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .btn-custom:hover:not(:disabled) {
      background: var(--hubspot-coral);
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(255, 122, 89, 0.3);
    }

    .btn-custom:disabled {
      background: #cccccc;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .btn-outline-custom {
      border: 2px solid var(--hubspot-orange);
      color: var(--hubspot-orange);
      background: transparent;
      border-radius: 10px;
      padding: 12px 30px;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .btn-outline-custom:hover {
      background: var(--hubspot-orange);
      color: white;
    }

    /* Completion message */
    .completion-message {
      background: white;
      padding: 50px;
      border-radius: 20px;
      text-align: center;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
      animation: fadeIn 0.5s ease;
    }

    .completion-icon {
      font-size: 3rem;
      color: #28a745;
      margin-bottom: 20px;
    }

    .selection-required {
      color: #dc3545;
      font-size: 0.9rem;
      margin-top: 10px;
      font-weight: 500;
    }

    .loading-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: white;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
  </style>
</head>
<body>
  <!-- Loading Screen -->
  <div id="loadingScreen" class="loading-screen" style="display: none;">
    <div class="spinner-border text-warning" style="width: 3rem; height: 3rem;" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <h4 class="mt-3">Analyzing your answers...</h4>
    <p class="text-muted">Getting your personalized HubSpot audit report ready</p>
  </div>

  <!-- Completion Screen -->
  <div id="completionScreen" class="loading-screen" style="display: none;">
    <div class="completion-message">
      <div class="completion-icon">
        <i class="fas fa-check-circle"></i>
      </div>
      <h3>Audit Complete! ðŸŽ‰</h3>
      <p class="text-muted mb-4">Thank you for completing the HubSpot Usage Audit.</p>
      <form id="auditForm" action="/audit/submit" method="POST" style="display: none;">
        <!-- Hidden form fields will be populated by JavaScript -->
      </form>
      <button id="showResults" class="btn btn-custom btn-lg">View My Results</button>
    </div>
  </div>

  <!-- Header -->
  <div class="hubspot-header">
    <div class="hubspot-logo">
      <i class="fa-solid fa-circle-nodes me-2 text-warning"></i> HubSpot Audit
    </div>
    <div class="small text-muted">CRM Optimization Check</div>
  </div>

  <!-- Main Audit Interface -->
  <div class="audit-container">
    <div class="question-card">
      <div id="sectionBadge" class="section-badge"></div>
      <div id="questionText" class="question-text"></div>

      <div class="progress-text small text-muted mb-2">
        <span id="progressText">Question 1 of 82</span>
        <span id="sectionProgress" class="ms-3">Section 1 of 15</span>
      </div>
      <div class="progress-bar">
        <div id="progressFill" class="progress-fill" style="width: 0%"></div>
      </div>

      <div class="options-container">
        <div class="option-btn" data-value="0">No (0)</div>
        <div class="option-btn" data-value="1">Partial (1)</div>
        <div class="option-btn" data-value="2">Yes (2)</div>
      </div>

      <!-- Selection Required Message -->
      <div id="selectionRequired" class="selection-required" style="display: none;">
        <i class="fas fa-exclamation-circle me-2"></i>Please select an answer to continue
      </div>

      <div class="navigation-buttons">
        <button id="prevBtn" class="btn btn-outline-custom" style="display:none;">
          <i class="fas fa-arrow-left me-2"></i>Previous
        </button>
        <button id="nextBtn" class="btn btn-custom" disabled>
          Next <i class="fas fa-arrow-right ms-2"></i>
        </button>
      </div>
    </div>
  </div>

  <script>
    // Questions data from EJS template
    const sections = <%- JSON.stringify(sections) %>;
    
    // Flatten all questions into a single array with section info
    let allQuestions = [];
    Object.keys(sections).forEach(sectionName => {
        sections[sectionName].forEach((question, index) => {
            allQuestions.push({
                section: sectionName,
                question: question.question,
                max_score: question.max_score,
                sectionIndex: Object.keys(sections).indexOf(sectionName),
                questionIndex: index,
                totalInSection: sections[sectionName].length
            });
        });
    });

    let currentQuestionIndex = 0;
    const answers = {};
    const optionButtons = document.querySelectorAll('.option-btn');
    const nextBtn = document.getElementById('nextBtn');
    const prevBtn = document.getElementById('prevBtn');
    const questionText = document.getElementById('questionText');
    const sectionBadge = document.getElementById('sectionBadge');
    const progressText = document.getElementById('progressText');
    const sectionProgress = document.getElementById('sectionProgress');
    const progressFill = document.getElementById('progressFill');
    const loadingScreen = document.getElementById('loadingScreen');
    const completionScreen = document.getElementById('completionScreen');
    const showResultsBtn = document.getElementById('showResults');
    const auditForm = document.getElementById('auditForm');
    const selectionRequired = document.getElementById('selectionRequired');

    // Initialize
    updateQuestion();

    // Option selection
    optionButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            // Remove selected class from all buttons
            optionButtons.forEach(b => b.classList.remove('selected'));
            
            // Add selected class to clicked button
            btn.classList.add('selected');
            
            // Store the answer
            const currentQuestion = allQuestions[currentQuestionIndex];
            const answerKey = `q${currentQuestion.questionIndex}_${currentQuestion.section.replace(/\s+/g, '_')}`;
            answers[answerKey] = btn.getAttribute('data-value');
            
            // Enable Next button
            nextBtn.disabled = false;
            
            // Hide selection required message
            selectionRequired.style.display = 'none';
            
            // Auto-advance to next question after 500ms
            setTimeout(() => {
                if (currentQuestionIndex < allQuestions.length - 1) {
                    nextQuestion();
                } else {
                    completeAudit();
                }
            }, 500);
        });
    });

    // Next button
    nextBtn.addEventListener('click', () => {
        const currentQuestion = allQuestions[currentQuestionIndex];
        const answerKey = `q${currentQuestion.questionIndex}_${currentQuestion.section.replace(/\s+/g, '_')}`;
        
        // Check if current question is answered
        if (answers[answerKey] === undefined) {
            selectionRequired.style.display = 'block';
            return;
        }
        
        if (currentQuestionIndex < allQuestions.length - 1) {
            nextQuestion();
        } else {
            completeAudit();
        }
    });

    // Previous button
    prevBtn.addEventListener('click', () => {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            updateQuestion();
        }
    });

    // Show results button
    showResultsBtn.addEventListener('click', () => {
        loadingScreen.style.display = 'flex';
        
        // Populate the hidden form with answers
        Object.keys(answers).forEach(key => {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = answers[key];
            auditForm.appendChild(input);
        });
        
        // Submit the form
        setTimeout(() => {
            auditForm.submit();
        }, 1000);
    });

    function nextQuestion() {
        if (currentQuestionIndex < allQuestions.length - 1) {
            currentQuestionIndex++;
            updateQuestion();
        }
    }

    function updateQuestion() {
        const question = allQuestions[currentQuestionIndex];
        
        // Update question text
        questionText.textContent = question.question;
        
        // Update section badge
        sectionBadge.textContent = question.section;
        
        // Update progress
        const overallProgress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
        
        progressFill.style.width = `${overallProgress}%`;
        progressText.textContent = `Question ${currentQuestionIndex + 1} of ${allQuestions.length}`;
        sectionProgress.textContent = `Section ${question.sectionIndex + 1} of ${Object.keys(sections).length}`;
        
        // Update navigation buttons
        prevBtn.style.display = currentQuestionIndex > 0 ? 'block' : 'none';
        
        // Disable Next button until answer is selected for this question
        const answerKey = `q${question.questionIndex}_${question.section.replace(/\s+/g, '_')}`;
        const isAnswered = answers[answerKey] !== undefined;
        nextBtn.disabled = !isAnswered;
        
        // Hide selection required message initially
        selectionRequired.style.display = 'none';
        
        if (currentQuestionIndex === allQuestions.length - 1) {
            nextBtn.innerHTML = 'Finish Audit <i class="fas fa-check ms-2"></i>';
        } else {
            nextBtn.innerHTML = 'Next <i class="fas fa-arrow-right ms-2"></i>';
        }
        
        // Check if this question was already answered
        const previousAnswer = answers[answerKey];
        
        // Clear all selections
        optionButtons.forEach(btn => btn.classList.remove('selected'));
        
        // Restore previous selection if exists
        if (previousAnswer !== undefined) {
            optionButtons.forEach(btn => {
                if (btn.getAttribute('data-value') === previousAnswer) {
                    btn.classList.add('selected');
                }
            });
        }
    }

    function completeAudit() {
        // Hide main interface
        document.querySelector('.audit-container').style.display = 'none';
        
        // Show completion screen
        completionScreen.style.display = 'flex';
    }

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight' || e.key === ' ') {
            // Next question on right arrow or space - but only if answered
            const currentQuestion = allQuestions[currentQuestionIndex];
            const answerKey = `q${currentQuestion.questionIndex}_${currentQuestion.section.replace(/\s+/g, '_')}`;
            
            if (answers[answerKey] === undefined) {
                selectionRequired.style.display = 'block';
                return;
            }
            
            if (currentQuestionIndex < allQuestions.length - 1) {
                nextQuestion();
            }
        } else if (e.key === 'ArrowLeft') {
            // Previous question on left arrow
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                updateQuestion();
            }
        } else if (e.key >= '0' && e.key <= '2') {
            // Select answer on number keys 0, 1, 2
            const value = e.key;
            const currentQuestion = allQuestions[currentQuestionIndex];
            const answerKey = `q${currentQuestion.questionIndex}_${currentQuestion.section.replace(/\s+/g, '_')}`;
            answers[answerKey] = value;
            
            // Update UI
            optionButtons.forEach(btn => {
                btn.classList.remove('selected');
                if (btn.getAttribute('data-value') === value) {
                    btn.classList.add('selected');
                }
            });
            
            // Enable Next button
            nextBtn.disabled = false;
            
            // Hide selection required message
            selectionRequired.style.display = 'none';
            
            // Auto-advance
            setTimeout(() => {
                if (currentQuestionIndex < allQuestions.length - 1) {
                    nextQuestion();
                } else {
                    completeAudit();
                }
            }, 500);
        }
    });

    // Initialize first question
    updateQuestion();
  </script>
</body>
</html>